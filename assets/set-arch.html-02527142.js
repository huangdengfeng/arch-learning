import{_ as e,p as i,q as l,a1 as r}from"./framework-a44ba987.js";const t="/arch-learning/images/set-arch.png",n={};function h(s,a){return i(),l("div",null,a[0]||(a[0]=[r('<h1 id="单元化架构" tabindex="-1"><a class="header-anchor" href="#单元化架构" aria-hidden="true">#</a> 单元化架构</h1><p>所谓“单元”，是指一个能完成所有业务操作的自包含集合，在这个集合中包含了所有业 务所需的所有服务，以及分配给这个单元的数据。单元化架构就是把单元作为部署的基 本单位，在全站所有机房中部署数个单元，每个机房里的单元数目不定，任意一个单元 都部署了系统所需的所有应用，数据则是全量数据按照某种维度划分后的一部分。</p><p>单元化架构希望在分布式架构应用拆分和数据拆分的基础上解决以下问题:</p><ul><li>异地场景下的访问延时问题，实现异地多活。</li><li>单机房数据库连接限制问题，突破物理限制。</li><li>容量预估和扩容复杂问题，按单元预估和扩容。</li><li>发布变更灰度问题，支持灰度发布。</li></ul><p>单元化架构的核心原则是单元化流量封闭，包含以下几点:</p><ul><li>核心业务是可分片的。</li><li>核心业务的分片是均衡的，如支付宝以用户 ID 作为分片维度。</li><li>核心业务尽量自包含，调用尽量封闭。</li><li>整个系统要面向逻辑分区设计，而不是物理部署。</li></ul><h2 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图" aria-hidden="true">#</a> 架构图</h2><p>以两地四中心举例。合理的规划可以做到多地多中心，当然也需要强大的基础设施和上层的控制面系统。</p><p><img src="'+t+'" alt="单元化架构图"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>',10)]))}const d=e(n,[["render",h],["__file","set-arch.html.vue"]]);export{d as default};
