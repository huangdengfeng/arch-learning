import{_ as s,p as e,q as n,a1 as r}from"./framework-a44ba987.js";const p={};function l(i,a){return e(),n("div",null,a[0]||(a[0]=[r(`<h1 id="linux-perf-定位新能" tabindex="-1"><a class="header-anchor" href="#linux-perf-定位新能" aria-hidden="true">#</a> linux perf 定位新能</h1><p>通常java程序使用arthas perfiler 来定位，但定位程序启动过程不太方便。</p><h2 id="生成数据" tabindex="-1"><a class="header-anchor" href="#生成数据" aria-hidden="true">#</a> 生成数据</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 已知pid情况</span>
<span class="token function">sudo</span> perf record <span class="token parameter variable">-F</span> <span class="token number">500</span> <span class="token parameter variable">-p</span> <span class="token number">1234</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-o</span> perf1.data -- <span class="token function">sleep</span> <span class="token number">10</span>
<span class="token comment">#perf record：使用perf工具进行性能采样。</span>
<span class="token comment">#-F 500：设置采样频率为500Hz，即每秒采样500次。</span>
<span class="token comment"># -p 1234：指定要采样的进程ID为1234。</span>
<span class="token comment">#-g：采集调用栈信息，以便生成函数调用关系图。</span>
<span class="token comment"># -o perf1.data：将采样数据保存到文件perf1.data中。</span>
<span class="token comment"># -- sleep 10：在采样前等待10秒，以便让被采样的进程有足够的时间运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关键字采样</span>
<span class="token function">sudo</span> perf record <span class="token parameter variable">-F</span> <span class="token number">500</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">\`</span>pgrep <span class="token parameter variable">-f</span> <span class="token string">&quot;关键字&quot;</span><span class="token variable">\`</span></span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-o</span> perf1.data -- <span class="token function">sleep</span> <span class="token number">10</span>
<span class="token comment"># -XX:+PreserveFramePointer是Java虚拟机的一个启动参数，用于在Java程序中保留调用栈帧指针。调用栈帧指针是一个指向当前函数调用栈帧的指针，可以用于在运行时跟踪函数调用栈。在Java程序中，调用栈帧指针可以用于生成函数调用关系图，帮助我们定位程序中的性能瓶颈。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动采样</span>
<span class="token function">sudo</span> perf record <span class="token parameter variable">-F</span> <span class="token number">500</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-o</span> perf1.data -- <span class="token builtin class-name">command</span> args <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全量采样</span>
<span class="token function">sudo</span> perf record <span class="token parameter variable">-F</span> <span class="token number">500</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-o</span> perf1.data 
<span class="token comment"># -a cpu全部数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结果查看" tabindex="-1"><a class="header-anchor" href="#结果查看" aria-hidden="true">#</a> 结果查看</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载转换工具</span>
perf report <span class="token parameter variable">-i</span>  perf1.data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成svg-查看" tabindex="-1"><a class="header-anchor" href="#生成svg-查看" aria-hidden="true">#</a> 生成svg 查看</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载转换工具</span>
<span class="token function">git</span> clone https://github.com/brendangregg/FlameGraph.git
<span class="token function">sudo</span> perf script <span class="token parameter variable">-i</span> perf1.data<span class="token operator">|</span> ./FlameGraph/stackcollapse-perf.pl <span class="token operator">|</span> ./FlameGraph/flamegraph.pl <span class="token operator">&gt;</span> out.svg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> java</h2><p>需要转化符号，一般利用开源工具生成数据 https://github.com/jvm-profiling-tools/perf-map-agent</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>perf-java-flames <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>perf-record-options<span class="token operator">&gt;</span>
<span class="token comment"># ./perf-java-flames PID -F 500 -g -o perf1.data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const c=s(p,[["render",l],["__file","perf.html.vue"]]);export{c as default};
