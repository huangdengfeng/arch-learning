import{_ as o,M as c,p as i,q as l,a1 as e,R as s,t as a,N as p}from"./framework-a44ba987.js";const u={},r={href:"https://github.com/apache/dubbo/issues/10353",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/apache/dubbo/issues/8363",target:"_blank",rel:"noopener noreferrer"},d={href:"https://cn.dubbo.apache.org/zh-cn/blog/2022/12/19/triple-%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81-java-%E5%BC%82%E5%B8%B8%E5%9B%9E%E4%BC%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/filter/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/seezoon/seezoon-standard/tree/master/starters/dubbo-spring-boot-starter/src/main/java/com/seezoon/dubbo/advice",target:"_blank",rel:"noopener noreferrer"};function b(g,n){const t=c("ExternalLinkIcon");return i(),l("div",null,[n[7]||(n[7]=e('<h1 id="dubbo-triple-异常处理" tabindex="-1"><a class="header-anchor" href="#dubbo-triple-异常处理" aria-hidden="true">#</a> Dubbo Triple 异常处理</h1><p>从dubbo协议切换到triple最大的不适应就是异常的处理，异常都成RuntimeException。</p><h2 id="社区有两种方向" tabindex="-1"><a class="header-anchor" href="#社区有两种方向" aria-hidden="true">#</a> 社区有两种方向</h2><ul><li>上下文透传错误码：采用attachment透传错误码和错误消息，相当于利用http2 response header(不是trailer)</li><li>响应体中定义错误码</li></ul><h2 id="个人意见" tabindex="-1"><a class="header-anchor" href="#个人意见" aria-hidden="true">#</a> 个人意见</h2><p>针对内网微服务，错误码一定要在协议里面体现，这样才方便做错误码监控。</p><h2 id="官网讨论贴" tabindex="-1"><a class="header-anchor" href="#官网讨论贴" aria-hidden="true">#</a> 官网讨论贴</h2>',7)),s("p",null,[s("a",r,[n[0]||(n[0]=a("issues-10353")),p(t)]),s("a",k,[n[1]||(n[1]=a("issues-8363")),p(t)]),s("a",d,[n[2]||(n[2]=a("Triple协议异常设计")),p(t)])]),n[8]||(n[8]=s("h2",{id:"实现原理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#实现原理","aria-hidden":"true"},"#"),a(" 实现原理")],-1)),s("p",null,[n[4]||(n[4]=a("通过定义provider和consumer的异常")),s("a",v,[n[3]||(n[3]=a("filter")),p(t)]),n[5]||(n[5]=a(" 来无感处理。"))]),n[9]||(n[9]=e(`<blockquote><p>注：用户自定义 filter 默认在内置 filter 之后</p></blockquote><p><strong>provider filter</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">PROVIDER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TripleProviderExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Listener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Result</span> appResponse<span class="token punctuation">,</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appResponse<span class="token punctuation">.</span><span class="token function">hasException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Throwable</span> exception <span class="token operator">=</span> appResponse<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">RpcException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">RpcException</span> rpcException <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcException</span><span class="token punctuation">)</span> exception<span class="token punctuation">;</span>
            appResponse<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-code&quot;</span><span class="token punctuation">,</span> rpcException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            appResponse<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-msg&quot;</span><span class="token punctuation">,</span> rpcException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            appResponse<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-code&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RpcException</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            appResponse<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-msg&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">,</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>consumer filter</strong> 这样到消费者转变成RpcException。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">CONSUMER</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TripleConsumerExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Listener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Result</span> appResponse<span class="token punctuation">,</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appResponse<span class="token punctuation">.</span><span class="token function">hasException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> appResponse<span class="token punctuation">.</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> appResponse<span class="token punctuation">.</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;err-msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            appResponse<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">,</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">,</span> <span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加扩展申明</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>src
 |-main
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.rpc.Filter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>org.apache.dubbo.rpc.Filter中纯文本内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tripleProviderException=com.seezoon.dubbo.support.filter.TripleProviderExceptionFilter
tripleConsumerException=com.seezoon.dubbo.support.filter.TripleConsumerExceptionFilter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展知识" tabindex="-1"><a class="header-anchor" href="#扩展知识" aria-hidden="true">#</a> 扩展知识</h2><p>如何做到全局异常处理呢，比如我们provider业务逻辑有参数验证错误，Sql错误等。如果能像spring提供的<code>@ContollerAdivce</code> 一样处理就方便了。</p><p>这里需要我们自定义类似异常Advice的功能，让所有错误都能变成RpcException携带我们错误码及错误信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@DubboAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboExceptionAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@DubboExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">illegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h2>`,14)),s("p",null,[s("a",m,[n[6]||(n[6]=a("dubbo全局异常处理")),p(t)])])])}const E=o(u,[["render",b],["__file","tri-exception.html.vue"]]);export{E as default};
