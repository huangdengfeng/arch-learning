import{_ as e,p as a,q as r,a1 as d}from"./framework-a44ba987.js";const i={};function l(h,t){return a(),r("div",null,t[0]||(t[0]=[d('<h1 id="错误码设计" tabindex="-1"><a class="header-anchor" href="#错误码设计" aria-hidden="true">#</a> 错误码设计</h1><p>错误码的制定原则：快速溯源、简单易记、沟通标准化。</p><h2 id="错误码结构" tabindex="-1"><a class="header-anchor" href="#错误码结构" aria-hidden="true">#</a> 错误码结构</h2><p>错误码为了方便常见RPC协议传递采用数值类型定义。</p><p>错误码 = 模块编号(4) + 错误类型(1) + 错误编号(3).</p><ul><li>模块编号：根据模块生成，方便快速识别是哪个模块产生的错误。</li><li>错误类型：区分系统错误和业务错误，系统错误通常表示可能重试可以解决。业务错误通常用1表示，系统错误用2表示。</li><li>错误编号：标明具体的错误。</li></ul><p>例子：10001001</p><table><thead><tr><th>模块编号</th><th>类型</th><th>编号</th></tr></thead><tbody><tr><td>1000</td><td>1</td><td>001</td></tr></tbody></table><p>针对外部api仅需后4位即可。</p><h2 id="错误码系统设计" tabindex="-1"><a class="header-anchor" href="#错误码系统设计" aria-hidden="true">#</a> 错误码系统设计</h2><p>一个大型分布式系统需要统一管理错误。</p><ul><li>错误码登记</li><li>错误码转义</li><li>错误码对应错误信息i18n支持</li></ul>',12)]))}const o=e(i,[["render",l],["__file","error-code.html.vue"]]);export{o as default};
