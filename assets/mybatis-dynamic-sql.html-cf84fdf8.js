import{_ as a,p as n,q as e,a1 as t}from"./framework-a44ba987.js";const o={};function p(l,s){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="mybatis动态sql-语句" tabindex="-1"><a class="header-anchor" href="#mybatis动态sql-语句" aria-hidden="true">#</a> Mybatis动态sql 语句</h1><h2 id="符号-vs" tabindex="-1"><a class="header-anchor" href="#符号-vs" aria-hidden="true">#</a> 符号<code>#</code> vs <code>$</code></h2><p>在 MyBatis 中，SQL 参数的写法有两种：# 和 $。两者的区别在于：</p><ul><li><code>#</code>会将参数占位符替换成 JDBC 预编译语句中的问号 ?，然后将预处理语句发送给数据库，因此可以有效地防止 SQL 注入攻击，但是需要注意使用正确的类型处理器。</li><li><code>$</code>不会将参数占位符替换成问号 ?，而是直接将参数值插入到 SQL 语句中，因此容易受到 SQL 注入攻击，一般不建议使用。</li></ul><h2 id="使用常量" tabindex="-1"><a class="header-anchor" href="#使用常量" aria-hidden="true">#</a> 使用常量</h2><p><strong>sql中</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> t<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> \${<span class="token variable">@com.xxxx.constants.DbStatusConstant</span><span class="token variable">@STATUS_NORMAL</span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>指令或者标签中</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status == @com.xxxx.constants.DbStatusConstant@STATUS_NORMAL<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组或者集合" tabindex="-1"><a class="header-anchor" href="#数组或者集合" aria-hidden="true">#</a> 数组或者集合</h2><ul><li>如果参数中未使用<code>@Param(&quot;名字&quot;)</code>，如果传数组则<code>collection=&quot;array&quot;</code>，如果传集合则<code>collection=&quot;list&quot;</code></li><li>如果使用<code>@Param(&quot;名字&quot;)</code>，或者在对象中，则添实际的命名</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> t 
  <span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;array != null and array.length &gt; 0&quot;</span><span class="token operator">&gt;</span>
   t<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span>
    <span class="token operator">&lt;</span>foreach item<span class="token operator">=</span><span class="token string">&quot;item&quot;</span> collection<span class="token operator">=</span><span class="token string">&quot;array&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">&quot;(&quot;</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">&quot;)&quot;</span><span class="token operator">&gt;</span>
        <span class="token comment">#{item}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> t 
  <span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;list != null and list.size() &gt; 0&quot;</span><span class="token operator">&gt;</span>
   t<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">in</span>
    <span class="token operator">&lt;</span>foreach item<span class="token operator">=</span><span class="token string">&quot;item&quot;</span> collection<span class="token operator">=</span><span class="token string">&quot;list&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">&quot;(&quot;</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">&quot;)&quot;</span><span class="token operator">&gt;</span>
        <span class="token comment">#{item}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转义" tabindex="-1"><a class="header-anchor" href="#转义" aria-hidden="true">#</a> 转义</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span>
 <span class="token operator">and</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>create_time <span class="token operator">&gt;</span> <span class="token comment">#{createDate} and t.create_time &lt; date_add(#{createDate}, interval 1 day))</span>
<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const c=a(o,[["render",p],["__file","mybatis-dynamic-sql.html.vue"]]);export{c as default};
