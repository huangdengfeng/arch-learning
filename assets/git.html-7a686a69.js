import{_ as r,M as n,p as s,q as c,a1 as t,R as i,t as d,N as l}from"./framework-a44ba987.js";const o="/arch-learning/images/git-pr.png",u={},g={href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/settings/keys",target:"_blank",rel:"noopener noreferrer"};function m(v,e){const a=n("ExternalLinkIcon");return s(),c("div",null,[e[2]||(e[2]=t('<h1 id="git-日常常用操作" tabindex="-1"><a class="header-anchor" href="#git-日常常用操作" aria-hidden="true">#</a> Git 日常常用操作</h1><h2 id="密码相关" tabindex="-1"><a class="header-anchor" href="#密码相关" aria-hidden="true">#</a> 密码相关</h2><ul><li>记住密码 <code>git config --global credential.helper store</code></li><li>清空密码 <code>git config --global --unset credential.helper</code></li></ul><h2 id="配置ssh免登" tabindex="-1"><a class="header-anchor" href="#配置ssh免登" aria-hidden="true">#</a> 配置ssh免登</h2>',4)),i("p",null,[i("a",g,[e[0]||(e[0]=d("生成Key")),l(a)])]),i("p",null,[i("a",h,[e[1]||(e[1]=d("添加key")),l(a)])]),e[3]||(e[3]=t(`<h2 id="仓库克隆" tabindex="-1"><a class="header-anchor" href="#仓库克隆" aria-hidden="true">#</a> 仓库克隆</h2><ul><li>默认clone master</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>克隆指定分支</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone -b [branch_name] url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><ul><li>本地和远程，<code>-a</code> 为同时显示远程仓库分支信息，不加<code>-a </code>只显示本地</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>检出并创建分支</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b localName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>取远程分支，并创建本地对应分支</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b localName remoteName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看美化后的log" tabindex="-1"><a class="header-anchor" href="#查看美化后的log" aria-hidden="true">#</a> 查看美化后的log</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log --pretty=online -n 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看到reset后的log" tabindex="-1"><a class="header-anchor" href="#查看到reset后的log" aria-hidden="true">#</a> 查看到reset后的log</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reflog --date=iso
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="关于git-merge-和-git-rebase" tabindex="-1"><a class="header-anchor" href="#关于git-merge-和-git-rebase" aria-hidden="true">#</a> <strong>关于git merge 和 git rebase</strong></h2><ul><li><p>主干合分支 用git merge</p></li><li><p>分支合并主干推荐用git rebase，可以消除同源线</p></li><li><p>拉取多人合作分支时候使用会减少<code>merge commits</code></p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull --rebase 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>git pull 合并时候冲突，无法解决时候可以回到git pull 前的状态</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merge --abort
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>合并时候合并分支上差异的commits</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merge --squash [branch_name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="文件回退" tabindex="-1"><a class="header-anchor" href="#文件回退" aria-hidden="true">#</a> 文件回退</h2><p>git checkout [commit_id] -- fileName commit_id 默认为HEAD,上一次为HEAD~1，也可以填入指定commit_id</p><h2 id="回退" tabindex="-1"><a class="header-anchor" href="#回退" aria-hidden="true">#</a> 回退</h2><ul><li>回退到指定commit，commit_id=HEAD 则为当前，如果是不添加hard ,commit_id 之前的内容会在工作区，需要add后重新commit.</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset --hard commit_id 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>git reset -mixed：此为默认方式，不带任何参数的git reset，这种方式，它回退到某个版本，只保留源码，回退commit和index信息，需要重新add.</p></li><li><p>git reset -soft:回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</p></li><li><p>git reset -hard 彻底回退到某个版本，本地的源码也会变成为上一个版本的内容</p></li></ol><h2 id="pull-request-技巧" tabindex="-1"><a class="header-anchor" href="#pull-request-技巧" aria-hidden="true">#</a> Pull Request 技巧</h2><p>Pull request 不仅可以用于向上游共享代码，也可以在fork 上游后，同步更新，如图注意箭头。</p><p><img src="`+o+'" alt="PR"></p>',32))])}const x=r(u,[["render",m],["__file","git.html.vue"]]);export{x as default};
